<!--#include virtual="/plumbing/html.inc" -->
<!--#include virtual="/plumbing/var.inc" -->
<!--#set var="title" value="configuration files" -->
<title>
<!--#echo encoding="none" var="title" -->
</title>
<!--#include virtual="/plumbing/header.inc" -->
<!--#include virtual="/plumbing/blog-section.inc" -->
<!--#include virtual="/plumbing/html-top-start.inc" -->
<!--#include virtual="/plumbing/argle.inc" -->
<!--#include virtual="/plumbing/html-top-end.inc" -->
<!--#include virtual="/plumbing/blog-schema.inc" -->
<data class="u-url u-uid" value="<!--#echo encoding="none" var="address" --><!--#echo encoding="none" var="DOCUMENT_URI" -->">
</data>

<h1 itemprop="name" class="p-name">
<!--#echo encoding="none" var="title" -->
</h1>

<h2>the basics</h2>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-t1-b3.jpg" title="made with studio artist 5.5">

<p>
To check a static web site using a configuration file:
<kbd>ssc&nbsp;-f&nbsp;config.file</kbd>
</p>

<p>
A configuration file is in INI file format, which is basically a sequence of entries looking like:
</p>

<pre><code>
[section]
setting=value
setting=value
setting=
</code></pre>

<p>
The section names and entries are the same as <a href="/args/index.shtml">the long switch names</a>.
The part before the dot is the section name, and after the dot is the setting name.
</p>

<p>
Boolean settings require the &lsquo;=&rsquo;, but no value, after the setting name.
</p>

<h2>examples</h2>

<h3>
A simple configuration:
</h3>

<pre><code>
[general]
verbose=5
output=simple.out
class=

[site]
domain=example.edu
extension=html
index=index.html
root=~/www/gtdocs
</code></pre>

<p>
The website for example.edu can be found in ~/www/htdocs. Standard
index files are called index.html, and html files always have the html
extension.
</p>

<p>
The configuration outputs errors, warnings and info messages to
<!--#echo encoding="none" var="short" -->.out. It analyses class identifiers, so will scan CSS files for
class names.
</p>

<h3>Links and virtual directories</h3>

<p>
Here&rsquo;s an example of a site using virtual directories, accompanied by some link checking, including
external links and crosslinked ids.
</p>

<pre><code>
[general]
verbose=5
output=<!--#echo encoding="none" var="short" -->.out

[site]
domain=example.edu
extension=html
index=index.html
root=~/www/htdocs
virtual=/net=tests/virtual

[link]
check=
external=
xlink=
</code></pre>

<p>
The configuration file specifies a virtual directory. When a link
refers to the local directory /net, <!--#echo encoding="none" var="short" --> will seek the corresponding
file(s) in tests/virtual (relative to the current directory, not the
root).
</p>

<h3>Microformats</h3>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-t1-b3.jpg" title="made with studio artist 5.5">

<p>
<a href="https://microformats.org/">Microformats</a> contain machine&ndash;readable site information held in class attributes,
the kind of thing that cheers up search engines. For more gen, <a href="https://microformats.org/">browse their site, microformats.org</a>.
</p>

<pre><code>
[general]
verbose=5
output=<!--#echo encoding="none" var="short" -->.out
class=

[site]
domain=example.edu
extension=html
index=index.html
root=~/www/htdocs

[microformat]
verify=
</code></pre>

<p>
The only new thing here is to turn on microformats analysis (class
analysis is required).
</p>

<h3>HTML &amp; SVG</h3>

<p>
A configuration file to check a site against HTML 5.2 and SVG 1.1 might
contain:
</p>

<pre><code>
[general]<br>
output=site.out<br>
class=<br>
<br>
[link]<br>
check=<br>
<br>
[site]<br>
domain=example.edu<br>
extension=html<br>
index=index.html<br>
root=site<br>
<br>
[html]<br>
version=5.2<br>
<br>
[svg]<br>
version=1.1
</code></pre>

<h3>living standard</h3>

<p>
A configuration file to check against a particular WhatWG living
standard, gathering statistics:
</p>

<pre><code>
[general]<br>
output=jan21.out<br>
<br>
[html]<br>
version=2021/01/01<br>
<br>
[link]<br>
check=<br>
<br>
[ontology]<br>
schema.org=11.0<br>
<br>
[site]<br>
domain=example.edu<br>
extension=html<br>
index=index.html<br>
root=site<br>
<br>
[stats]<br>
summary=<br>
meta=
</code></pre>

<h3>
shadow output
</h3>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-t1-b3.jpg" title="made with studio artist 5.5">

<p>
A configuration file to shadow copy and deduplicate a site might
contain:
</p>

<pre><code>
[general]<br>
output=dedu.out<br>
class=<br>
<br>
[site]<br>
domain=example.edu<br>
extension=html<br>
index=index.html<br>
root=site<br>
<br>
[shadow]<br>
copy=5<br>
root=shadow<br>
file=dedu.ndx
</code></pre>

<h3>ontology</h3>

<p>
A configuration file to export ontologies content from schema.org
version 7.2 might contain:
</p>

<pre><code>
[general]<br>
output=export.out<br>
class=<br>
<br>
[site]<br>
domain=example.edu<br>
extension=html<br>
index=index.html<br>
root=site<br>
<br>
[link]<br>
check=<br>
<br>
[ontology]<br>
export=<br>
root=export<br>
schema.org=7.2
</code></pre>

<p>
Actually, <!--#echo encoding="none" var="short" --> will report on any microdata it finds, no matter what.
Note that, if you use itemref in your pages, <!--#echo encoding="none" var="short" --> may give false
warnings in the section referenced by the itemref. This is because <!--#echo encoding="none" var="short" -->
does not always know that the referenced data is not intended to be
used in its own right, unless you put it under a &lt;TEMPLATE&gt; element.
</p>


<h3>statistics</h3>

<p>
To gather some site stats:
</p>

<pre><code>
[general]
ssi=
verbose=5
output=<!--#echo encoding="none" var="short" -->.out
class=

[site]
domain=example.edu
extension=html
extension=shtml
index=index.html
root=~/www/htdocs

[stats]
selected=
summary=
</code></pre>

<p>
This turns on summary statistics, which produces a grand total at the end of
a complete run (add <kbd>page=</kbd> below summary for individual page stats).
There are many other <a href="stats.shtml">stats reports available</a>.
</p>

<p>
Note also that server side includes have been turned on using general.ssi,
and files with the SHTML extension will be treated as web pages.
</p>

<h3>mathML</h3>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-t1-b3.jpg" title="made with studio artist 5.5">

<p>
This configuration file could be used to test MathML 2.
</p>

<pre><code>
[general]
verbose=5
output=m2.out
class=

[link]
check=

[site]
domain=example.edu
extension=html
index=index.html
root=~/www/htdocs

[math]
version=2

[validation]
citype=function
citype=list
citype=logical
citype=matrix
citype=set
citype=var-x
citype=vector
</code></pre>

<p>
What&rsquo;s interesting here is the validation section. The MathML
documentation lists a specific set of values that can be used with the
TYPE attribute on the CI element. The examples in the specification
give this attribute many additional, and apparently illegal, values.
(This apparent inconsistency is not uncommon amongst web
specifications.) The way to avoid <!--#echo encoding="none" var="short" --> complaining about these extra
values is to give CI TYPE additional values in the configuration file,
as noted.
</p>

<p>
Indeed, many enumerated attribute values can be extended in this way.
Use the --validation switch to get a complete list.
</p>

<h2>real world examples</h2>

<h3>arts &amp; ego</h3>

<p>
These files are based on the steps I take to update <a href="https://dylanharris.org/">my OpenBSD hosted website, arts &amp; ego</a>.
</p>

<p>
Presume a directory containing the following:
</p>

<table>
<tr><td>site.conf</td><td>ssc configuration file for a website</td></tr>
<tr><td>site</td><td>shadow output produced by ssc</td></tr>
</table>

<p>
Then I run a script like this:
</p>

<pre><code>
ssc -f site.conf
upload.sh site /var/www/site-upload server user 0
ssh user@server &ldquo;cd /var/www ; mv site x ; mv site-upload site ;
mv x site-upload ; ln -sf site htdocs&rdquo;
</code></pre>

<p>
upload.sh is a macos bash script that can be found among the source
code. Note that I have rather naughtily replaced OpenBSD&rsquo;s httpd
document directory /var/www/htdocs with a link.
</p>

<p>
Here is site.conf:
</p>

<pre><code>
[general]
verbose=info
output=~/www/live.out
ignore=pre
rpt=
progress=
class=
classic=
no-rel=
ssi=

[css]
verify=
extension=css
version=2023++

[html]
version=2023/10/01
title=80
rfc1942=
rfc2070=
ie=
safari=

[link]
no-external=
xlink=
pretend=cgi-bin
local=

[nits]
silence=use_double_quote_code
silence=use_quote_code
silence=missing_itemtype

[shadow]
copy=dedu
root=~/www/live
file=~/www/live.ndx
ignore=inc
info=
msg=arts &amp; ego (c) 1978-2024 dylan harris

[site]
domain=dylanharris.org
extension=shtml
extension=html
extension=htm
extension=asp
index=index.shtml
root=|/Sites

[spell]
no-check=

[stats]
summary=

[validation]
lang=ma
fontname=Marain
fontname=droid-sans-mono
fontname=ArialMT
fontname=Arial-BoldMT
fontname=Times-Italic
fontname=Times-Roman
fontname=TimesNewRomanPSMT
fontname=TrebuchetMS
fontname=TrebuchetMS-Italic
</code></pre>

<p>
My site has been built by hand over the decades, and is full of errors.
I wrote <!--#echo encoding="none" var="short" --> because I was frustrated that I could find no tool to
properly check it. Unfortunately, <!--#echo encoding="none" var="short" --> is too successful: it finds
a gadzillion errors in <a href="https://dylanharris.org/">arts &amp; ego</a>. I am slowly making the repairs.
</p>

<h3>OpenBSD website</h3>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-t1-b3.jpg" title="made with studio artist 5.5">

<p>
Perhaps you&rsquo;ve grabbed <a href="https://github.com/openbsd/www.git">a copy of the OpenBSD website from github</a>:
</p>

<pre><code>
[general]
verbose=info
output=~/obsd.out
git=
progress=
sloven=

[css]
version=2023++
device=3

[html]
version=2023/10/01
title=80
force=

[link]
check=
no-xlink=

[nits]
comment=ftp_protocol

[site]
domain=openbsd.org
root=~/github/www
index=index.html

[stats]
summary=
</code></pre>

<!--#include virtual="/plumbing/under.inc" -->
<!--#include virtual="/plumbing/args.inc" -->
<!--#include virtual="/plumbing/html-end.inc" -->
