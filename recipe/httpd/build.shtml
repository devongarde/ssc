<!--#include virtual="/plumbing/html.inc" -->
<!--#include virtual="/plumbing/var.inc" -->
<!--#set var="title" value="build notes" -->
<title>
<!--#echo encoding="none" var="title" -->
</title>
<!--#include virtual="/plumbing/header.inc" -->
<!--#include virtual="/plumbing/blog-section.inc" -->
<!--#include virtual="/plumbing/html-top-start.inc" -->
<!--#include virtual="/plumbing/html-top-end.inc" -->
<!--#include virtual="/plumbing/blog-schema.inc" -->
<data class="u-url u-uid" value="<!--#echo encoding="none" var="address" --><!--#echo encoding="none" var="DOCUMENT_URI" -->">
</data>

<h1 itemprop="name" class="p-name">
<!--#echo encoding="none" var="title" -->
</h1>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-new8-sp1.jpg" title="made with studio artist 5.5">

<h2>Introduction</h2>

<p>
<a href="/index.shtml"><!--#echo encoding="none" var="short" --></a> can be built on various
<a href="https://en.wikipedia.org/wiki/Unix">unii</a> with <a href="https://cmake.org/">CMake</a> and
<a href="https://gcc.gnu.org/">gcc</a> or <a href="https://clang.llvm.org/">clang</a>
for <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4661.html">C++ 17</a>
or better, or <a href="https://visualstudio.microsoft.com/">Visual Studios 2017 / 2019 / 2022</a>
under <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a>. I have
built &amp; tested a 64-bit version in various OSs on intel/amd &amp; arm64
(m2) architecture.
</p>

<p>
Although <!--#echo encoding="none" var="short" --> builds with older compilers on some older systems, not all
features are available.
</p>

<h2>Libraries</h2>

<h3>Common dependencies</h3>

<p>
<a href="/index.shtml"><!--#echo encoding="none" var="short" --></a>
needs <a href="https://boost.org/">boost version 1.75 or better</a>,
a recent copy of <a href="https://icu-project.org/">the ICU libraries</a>,
<a href="https://github.com/Microsoft/GSL">Microsoft&rsquo;s GSL library</a> (or #define NO_GSL), and a
<a href="https://curl.se/">recent version of libcurl</a> (note that
<a href="https://curl.se/libcurl/c/threadsafe.html">libcurl requires an underlying thread&ndash;safe SSL library</a>).
Usually, an Operating System&rsquo;s package manager has appropriate versions ready to install.
</p>

<p>
You may need to set these environment variables:
</p>

<ul>
<li>
BOOST: if you&rsquo;re not using your operating system&rsquo;s packaged flavour
of <a href="https://boost.org/">boost</a>, then set BOOST to your boost source root directory;
</li>
<li>
ICU_ROOT: if you&rsquo;re not using your operating system&rsquo;s packaged <a href="https://icu-project.org/">ICU</a>,
set ICU_ROOT to your ICU source root directory;
</li>
<li>
GSL: set it to your GSL root directory.
</li>
</ul>

<h3>hunspell</h3>

<p>
Building <!--#echo encoding="none" var="short" --> under unii, including macos,
requires <a href="https://hunspell.github.io/">a development installation of hunspell</a>,
or equivalent. You should be able to install it using the appropriate package manager.
</p>

<h3>winspell</h3>

<p>
The Windows build, by default, uses the native Windows spellchecker,
although, in Windows 10, that doesn&rsquo;t seem to work so well in
contexts unimpaired by monolingualism.
</p>

<h2>Building</h2>

<h3>Windows</h3>

<p>
To build from <a href="https://visualstudio.microsoft.com/">Visual Studio</a>, navigate to <kbd>recipe/tea</kbd>, open the
appropriate .sln file, then build. Only <a href="https://visualstudio.microsoft.com/">Visual Studios 2017, 2019 and
2022</a> have been built &amp; tested, for amd64 (x64) and arm64 (M2), under
Windows 10 &amp; 11.
</p>

<p>
Note the included solutions presume Microsoft&rsquo;s <a href="https://vcpkg.io">VCPKG</a> manager. There
are alternatives.
</p>

<p>
On low memory machines, disable the <a href="https://learn.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes?view=msvc-170">/MP</a> switch.
</p>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-new16-j5.jpg" title="made with studio artist 5.5">

<h3>Unii &amp; mock Unii</h3>

<p>
You will need <a href="https://cmake.org/">CMake</a> 3.19 or better. On <a href="https://linux.org/">Linux</a>, you will also need
<a href="https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/lsbrelease.html">lsb-release</a>.
These can be found in most distributions&rsquo; standard
packages. For macos, I used <a href="https://www.macports.org/">macports</a>,
but <a href="https://brew.sh/">brew</a> is good too. From the
home directory, compile a normal build thus:
</p>

<code>
cmake .
make
ctest
make install
</code>

<p>
For a debug build:
</p>

<code>
cmake -DCMAKE_BUILD_TYPE=Debug .
make
ctest
make install
</code>

<p>
If everything works correctly, then everything will be built, a series
of tests run, with a final result at the very end saying no failures.
Having said that, given <!--#echo encoding="none" var="short" --> is alpha, don&rsquo;t be too surprised to see
some warnings or some final test errors.
</p>

<p>
In particular,
complaints about being unable to find or copy files during testing are
not of concern, these come from scripts that set up or tear down
individual tests, and the standard commands used sometimes complain if
they can&rsquo;t find files they&rsquo;re supposed to delete, which is a bit silly
given that means things are already in the required state.
</p>

<p>
The following have, at some point, been successfully built as x64 amd:
</p>

<table>
<tr><td><a href="https://freebsd.org/">FreeBSD</a></td><td><a href="https://freebsd.org/">FreeBSD 13.2 / 13.1 / 12.4 / 12.3</a></td></tr>
<tr><td><a href="https://linux.org/">Linux</a></td><td><a href="https://almalinux.org/">Alma Linux 9</a>, <a href="https://aosc.io/">AOSC</a>,
<a href="https://www.centos.org/">Centos</a><a href="https://docs.centos.org/en-US/8-docs/"> 8 </a>/<a href="https://www.centos.org/stream9/"> 9</a>,
<a href="https://get.opensuse.org/tumbleweed/">SuSE Tumbleweed</a>, <a href="https://ubuntu.com/">Ubuntu</a>
<a href="https://releases.ubuntu.com/20.04/">20.04 </a>/<a href="https://www.releases.ubuntu.com/22.04/"> 22.04</a></td></tr>
<tr><td><a href="https://en.wikipedia.org/wiki/MacOS">MacOS</a></td><td><a href="https://en.wikipedia.org/wiki/MacOS">MacOS Sonoma,
Ventura, Monterey, Big Sur, Catalina, Mojave, High Sierra, Sierra, El Capitan, Yosemite</a></td></tr>
<tr><td><a href="https://openbsd.org/">OpenBSD</a></td><td><a href="https://openbsd.org/">7.4 / 7.3 / 7.2 / 7.1 / 7.0 / 6.9 / 6.8</a></td></tr>
</table>

<p>
The following have been successfully built as arm64:
</p>

<table>
<tr><td><a href="https://linux.org/">Linux</a></td><td><a href="https://www.centos.org/stream9/">Centos 9</a></td></tr>
<tr><td><a href="https://en.wikipedia.org/wiki/MacOS">MacOS</a></td><td><a href="https://en.wikipedia.org/wiki/MacOS">Sonoma, Ventura</a></td></tr>
</table>

<p>
The current version of <a href="/index.shtml"><!--#echo encoding="none" var="short" --></a> requires the current version of an operating
system. Older operating systems require older versions of <a href="/index.shtml"><!--#echo encoding="none" var="short" --></a>. Not all
features work on all systems.
</p>

<p>
I&rsquo;ve sometimes found it necessary to use cmake&rsquo;s
<kbd>-DCMAKE_CXX_COMPILER=&hellip;</kbd> switch.
</p>

<img alt="riff on name" class="mw50 inline_illustration_right" src="/image/ssc-msgdb-new17-sp1.jpg" title="made with studio artist 5.5">

<h3>Centos 9</h3>

<p>
The appropriate <a href="https://cmake.org/">CMake</a> command
for <a href="https://www.centos.org/stream9/">Centos Stream 9</a> is:
</p>

<code>
cmake . -DFLAVOUR=CentosOSStream -DFLAVOUR_VER=9
</code>

<p>
(note the standard spelling of flavour.)
</p>

<h3>OpenBSD</h3>

<p>
You may need to increase significantly the available memory setting
for your build account in login.conf.
</p>

<h2>Testing</h2>

<h3>Windows</h3>

<p>
Under Visual Studio, run <!--#echo encoding="none" var="xeqtest" --> using these arguments:
</p>

<code>
-v -x $(ProjectDir)..\..\<!--#echo encoding="none" var="xeq" -->.exe -f $(ProjectDir)..\toast\<!--#echo encoding="none" var="xeqtest" -->\win.lst
</code>

<p>
Add &lsquo;-d&rsquo; if you want the test utility to retain temporary files.
</p>

<h3>CMake</h3>

<p>
Under <a href="https://cmake.org/">CMake</a>, run ctest:
</p>

<code>
ctest -V
</code>

<p>
(which runs an <!--#echo encoding="none" var="xeqtest" --> for you, using nix.lst).
</p>

<h3>Dimitude</h3>

<p>
The testing utility is rather dim; it will test unbuilt features,
causing failures.
</p>

<p>
Spelling test results depend on the dictionaries installed.
</p>

<h2>Supporting libraries</h2>

<h3>GSL</h3>

<p>
If you can&rsquo;t find a copy of <A href="https://github.com/Microsoft/GSL">Microsoft&rsquo;s GSL</a> in your system&rsquo;s standard
package suite, then grab <A href="https://github.com/Microsoft/GSL">a current copy from its github repository</a>,
then unpack, build and install it. In Windows, remember to add its root directory to your local path.
</p>

<h3>Curl</h3>

<p>
This is in almost every unix repository, but not so
easy for Windows. I suggest the following:
</p>

<ol>
<li>Install <a href="https://vcpkg.io">the Microsoft repository vcpkg</a></li>
<li>Run up the visual studio 64bit native command prompt</li>
<li>Run the <a href="https://vcpkg.io">vcpkg</a> bootstrap batch file, noting the comments</li>
<li>Enter <kbd>vcpkg install curl:x64-windows</kbd></li>
<li>Add an environment variable to your account for CURL, perhaps:
    <kbd>CURL=****\vcpkg\installed\x64-windows</kbd></li>
<li>Add the installation bin directory to your local path, perhaps:
    <kbd>****\vcpkg\installed\x64-windows\bin</kbd></li>
<li>If you plan to debug, also add debug\bin, perhaps:
    <kbd>****\vcpkg\installed\x64-windows\debug\bin</kbd></li>
</ol>

<p>
Set the architecture as necessary. If you omit it, <a href="https://vcpkg.io">vcpkg</a> may carefully
ignore your hardware and install x86.
</p>

<h3>Boost</h3>

<p>
<a href="https://boost.org/">Boost</a> is to C++ as breakfast is to the working day.
</p>

<p>
Most package managers support it, including <a href="https://vcpkg.io">vcpkg</a>. Alternatively, build
your own version using the source found at <a href="https://boost.org/">boost.org</a>.
</p>

<!--#include virtual="/plumbing/under.inc" -->
<!--#include virtual="/plumbing/html-end.inc" -->
